---
# Install Rust toolchain and cross-compilation dependencies
- name: Install Rust build dependencies
  apt:
    name:
      - build-essential
      - gcc-arm-linux-gnueabihf
      - g++-arm-linux-gnueabihf
      - pkg-config
      - libssl-dev
      - cmake
      - libsdl2-dev
      - libsdl2-ttf-dev
      - libsdl2-gfx-dev
      - crossbuild-essential-armhf
      - libc6-dev-armhf-cross
      - libsdl2-dev:armhf
      - libsdl2-ttf-dev:armhf
      - libsdl2-gfx-dev:armhf
      - libpulse-dev:armhf
      - libudev-dev:armhf
      - libdbus-1-dev:armhf
      - libasound2-dev:armhf
      - libc6:armhf
      - libc6-dev:armhf
      - libgcc-s1:armhf
      - libstdc++6:armhf
    state: present
    update_cache: yes
  when: inventory_hostname in groups['hub']

# Enable armhf architecture
- name: Enable armhf architecture
  command: dpkg --add-architecture armhf
  when: inventory_hostname in groups['hub']
  register: add_arch_result
  changed_when: add_arch_result.rc == 0

# Update package lists after adding architecture
- name: Update package lists
  apt:
    update_cache: yes
  when: inventory_hostname in groups['hub'] and add_arch_result.changed

# Create toolchain file for CMake
- name: Create CMake toolchain file
  copy:
    dest: /home/proto/armhf-toolchain.cmake
    content: |
      set(CMAKE_SYSTEM_NAME Linux)
      set(CMAKE_SYSTEM_PROCESSOR arm)
      set(CMAKE_C_COMPILER /usr/bin/arm-linux-gnueabihf-gcc)
      set(CMAKE_CXX_COMPILER /usr/bin/arm-linux-gnueabihf-g++)
      set(CMAKE_FIND_ROOT_PATH /usr/arm-linux-gnueabihf)
      set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
      set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
      set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
      set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)
    owner: proto
    group: proto
    mode: "0644"
  when: inventory_hostname in groups['hub']

# Install SDL2 on fins
- name: Install SDL2 on fins
  apt:
    name:
      - libsdl2-2.0-0
      - libsdl2-ttf-2.0-0
      - libsdl2-gfx-1.0-0
      - libudev1
      - libdbus-1-3
      - libasound2
    state: present
    update_cache: yes
  when: inventory_hostname in groups['fins']

- name: Download rustup installer
  get_url:
    url: https://sh.rustup.rs
    dest: /tmp/rustup.sh
    mode: "0755"
  when: inventory_hostname in groups['hub']

- name: Install Rust using rustup (hub only)
  shell:
    cmd: /tmp/rustup.sh -y
    creates: /home/proto/.cargo/bin/rustc
  become_user: proto
  when: inventory_hostname in groups['hub']

- name: Add Rust to proto's PATH
  lineinfile:
    path: /home/proto/.zshrc
    line: 'export PATH="$HOME/.cargo/bin:$PATH"'
    create: yes
  become_user: proto
  when: inventory_hostname in groups['hub']

- name: Source cargo env and add ARM target
  shell:
    cmd: |
      . "$HOME/.cargo/env"
      rustup target add armv7-unknown-linux-gnueabihf
    executable: /bin/bash
  become_user: proto
  when: inventory_hostname in groups['hub']

- name: Configure Rust cross-compilation
  copy:
    dest: /home/proto/.cargo/config.toml
    content: |
      [target.armv7-unknown-linux-gnueabihf]
      linker = "arm-linux-gnueabihf-gcc"
      rustflags = [
        "-C", "link-arg=-L/usr/arm-linux-gnueabihf/lib",
        "-C", "link-arg=-Wl,-rpath-link,/usr/arm-linux-gnueabihf/lib",
        "-C", "link-arg=-Wl,--allow-shlib-undefined"
      ]
    owner: proto
    group: proto
    mode: "0644"
  when: inventory_hostname in groups['hub']

- name: Build Rust application for Pi Zero 2W
  shell:
    cmd: |
      . "$HOME/.cargo/env"
      cd /home/proto/protosuit-engine
      PKG_CONFIG_ALLOW_CROSS=1 PKG_CONFIG_PATH=/usr/lib/arm-linux-gnueabihf/pkgconfig CMAKE_TOOLCHAIN_FILE=/home/proto/armhf-toolchain.cmake cargo build --release --target armv7-unknown-linux-gnueabihf
    executable: /bin/bash
  become_user: proto
  register: build_result
  when: inventory_hostname in groups['hub']

# Deploy to fins
- name: Ensure binary exists before copying
  stat:
    path: /home/proto/protosuit-engine/target/armv7-unknown-linux-gnueabihf/release/protosuit-engine-fin
  register: binary_stat
  when: inventory_hostname in groups['hub']

- name: Copy binary to fins
  copy:
    src: /home/proto/protosuit-engine/target/armv7-unknown-linux-gnueabihf/release/protosuit-engine-fin
    dest: /usr/local/bin/protosuit-engine-fin
    mode: "0755"
    remote_src: yes
  when: inventory_hostname in groups['fins']

# Configure systemd service on fins
- name: Create systemd service for Engine Fin
  template:
    src: engine-fin.service.j2
    dest: /etc/systemd/system/engine-fin.service
    mode: "0644"
  when: inventory_hostname in groups['fins']
  notify: restart engine fin

- name: Enable and start Engine Fin service
  systemd:
    name: engine-fin
    state: started
    enabled: true
    daemon_reload: true
  when: inventory_hostname in groups['fins']
